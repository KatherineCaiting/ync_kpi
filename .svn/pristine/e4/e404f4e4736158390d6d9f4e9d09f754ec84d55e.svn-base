package com.ync365.oa.service.efficiency;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.ync365.oa.bo.EfficiencyBo;
import com.ync365.oa.entity.Department;
import com.ync365.oa.entity.Efficiency;
import com.ync365.oa.entity.Employe;
import com.ync365.oa.entity.Project;
import com.ync365.oa.repository.DepartmentDao;
import com.ync365.oa.repository.EfficiencyDao;
import com.ync365.oa.repository.EmployeDao;
import com.ync365.oa.repository.ProjectDao;


@Component
@Transactional
public class EfficiencyService {
    
    private static Logger logger = LoggerFactory.getLogger(EfficiencyService.class);
    
    @Autowired
    private EfficiencyDao efficiencyDao;
    
    @Autowired
    private ProjectDao projectDao;
    
    @Autowired
    private DepartmentDao departmentDao;
    
    @Autowired
    private EmployeDao employeDao;
    
    /**
     * 添加 
     * @param efficiencyBo
     */
    public void add(EfficiencyBo efficiencyBo) {
        
        Project project_t = new Project();
        
        //添加 project
        Map<String,Object> mapT = this.addProject(efficiencyBo,project_t);
        Project project = (Project) mapT.get("project");
        //添加创建时间
        project.setCreateTime(Calendar.getInstance().getTime());
        projectDao.save(project);

        addEff(efficiencyBo,mapT);
        
    }
    

    public List<Efficiency> findByProjectId(int proId) {
        return efficiencyDao.findByProjectId(proId);
    }
    
    /**
     * 编辑 
     * @param efficiencyBo
     */
    public void edit(EfficiencyBo efficiencyBo) {
        Project project_t  = projectDao.findOne(efficiencyBo.getProId());
        //添加 project
        Map<String,Object> mapT = this.addProject(efficiencyBo,project_t);
        Project project = (Project) mapT.get("project");
        projectDao.save(project);
        
        if(null != efficiencyBo.getEfficiencyIds() && efficiencyBo.getEfficiencyIds().size() > 0){
            //根据项目id去efficiency查询此项目id下所有的参与人员
            List<Efficiency> old_eff_list = this.findByProjectId(Integer.parseInt(String.valueOf(efficiencyBo.getProId())));
            //如果old_eff_list 为null  则else  新增保存
            if(null != old_eff_list && old_eff_list.size() > 0){
                //用户存放新增的集合
                /*List<Long> add_list_ids = new ArrayList<Long>();*/
                List<Integer> add_list_departmentIdBos = new ArrayList<Integer>(); //部门名称 list
                List<Integer> add_list_employeIdBos = new ArrayList<Integer>(); //员工姓名 list
                List<Integer> add_list_planHoursBos = new ArrayList<Integer>();//计划时长
                List<String> add_list_planBeginTimes = new ArrayList<String>();//计划开始时间
                List<String> add_list_planEndTimes = new ArrayList<String>();//计划结束时间
                
                //存放需要修改的集合
                List<Efficiency> udate_list= new ArrayList<Efficiency>();
                
                //存放需要删除的集合
                List<Efficiency> del_list= new ArrayList<Efficiency>();
                
                for(Efficiency temp : old_eff_list){
                    if(null != temp.getId()){
                        if(efficiencyBo.getEfficiencyIds().contains(temp.getId())){
                            //需要更新的集合
                            udate_list.add(temp);
                        }else{
                            //需要删除的集合
                            del_list.add(temp);
                        }
                    }
                }
                
                List<Employe> list_employe = new ArrayList<Employe>();
                Employe ee_emp = new Employe();
                //修改时  新增的数据
                for(int i=0 ; i< efficiencyBo.getEfficiencyIds().size() ; i++){
                    if(null == efficiencyBo.getEfficiencyIds().get(i) && null != efficiencyBo.getDepartmentIdBos().get(i)){
                        add_list_departmentIdBos.add(efficiencyBo.getDepartmentIdBos().get(i));
                        add_list_employeIdBos.add(efficiencyBo.getEmployeIdBos().get(i));
                        add_list_planHoursBos.add(efficiencyBo.getPlanHoursBos().get(i));
                        add_list_planBeginTimes.add(efficiencyBo.getPlanBeginTimes().get(i));
                        add_list_planEndTimes.add(efficiencyBo.getPlanEndTimes().get(i));
                        
                        if(null != efficiencyBo.getEmployeIdBos() && null != efficiencyBo.getEmployeIdBos().get(i)){
                            ee_emp = employeDao.findOne(efficiencyBo.getEmployeIdBos().get(i).longValue());
                            list_employe.add(ee_emp);
                        }
                        
                        
                        EfficiencyBo efficiencyBo_new = new EfficiencyBo();
                        efficiencyBo_new.setDepartmentIdBos(add_list_departmentIdBos);
                        efficiencyBo_new.setEmployeIdBos(add_list_employeIdBos);
                        efficiencyBo_new.setPlanBeginTimes(add_list_planBeginTimes);
                        efficiencyBo_new.setPlanEndTimes(add_list_planEndTimes);
                        efficiencyBo_new.setPlanHoursBos(add_list_planHoursBos);
                        efficiencyBo_new.setProjectNameBo(efficiencyBo.getProjectNameBo());
                        mapT.put("list",list_employe);
                        addEff(efficiencyBo_new,mapT);
                    }
                }
                
                
                //删除修改之后不要的数据
                if(null != del_list && del_list.size() > 0 ){
                    efficiencyDao.delete(del_list);
                }
                
                //修改时  需要修改的 数据
                if(null != udate_list && udate_list.size() > 0){
                    updateEff(udate_list,efficiencyBo);
                }
            }else{
                addEff(efficiencyBo,mapT);
            }
        }
    }
    
    /**
     * 封装更新 efficiency
     * @param udate_list
     * @param efficiencyBo
     */
    private void updateEff(List<Efficiency> udate_list, EfficiencyBo efficiencyBo) {
        if(null != udate_list &&  udate_list.size() > 0){
            Department det_t = new Department();
            Employe  ee_t = new Employe();
            for(Efficiency eff_t : udate_list){
                List<Long> list_t_t = efficiencyBo.getEfficiencyIds() ;
                if(null  != efficiencyBo && null !=  list_t_t && list_t_t.size() > 0){
                    for(int i =0 ; i< list_t_t.size() ;i++){
                        if(null != list_t_t.get(i) &&  eff_t.getId() == list_t_t.get(i)){
                            eff_t.setEmployeName(efficiencyBo.getProjectNameBo());
                            eff_t.setPlanBeginTime(this.stringToDate(efficiencyBo.getPlanBeginTimes().get(i)));
                            eff_t.setPlanEndTime(this.stringToDate(efficiencyBo.getPlanEndTimes().get(i)));
                            eff_t.setPlanHours(efficiencyBo.getPlanHoursBos().get(i));
                            if(null != efficiencyBo.getDepartmentIdBos().get(i)){
                                //根据id查询对象
                                det_t = departmentDao.findOne((efficiencyBo.getDepartmentIdBos().get(i)).longValue());
                                if(null != det_t && null != det_t.getName() && "" != det_t.getName()){
                                    eff_t.setDepartmentName(det_t.getName()); 
                                }
                                eff_t.setDepartmentId(efficiencyBo.getDepartmentIdBos().get(i));
                            }
                            if(null != efficiencyBo.getEmployeIdBos().get(i)){
                                //更加id查询对象
                                ee_t = employeDao.findOne(efficiencyBo.getEmployeIdBos().get(i).longValue());
                                if(null != ee_t){
                                    eff_t.setEmployeCode(ee_t.getCode().intValue());
                                    eff_t.setEmployeId(ee_t.getId().intValue());
                                    eff_t.setEmployeName(ee_t.getName());
                                }
                            }
                            
                            efficiencyDao.save(eff_t);
                            break;
                            
                        }
                    }
                }
            }
        }
    }


    /**
     * 封装添加 EfficiencyBo 方法
     * @param efficiencyBo
     * @param mapT
     */
    public void addEff(EfficiencyBo efficiencyBo,Map<String,Object> mapT){
        Department det = new Department();
        Project project = (Project) mapT.get("project");
        List<Employe> list = (List<Employe>) mapT.get("list");
        if(null != efficiencyBo){
            if(null != efficiencyBo.getDepartmentIdBos() && efficiencyBo.getDepartmentIdBos().size() > 0){
                for(int i=0 ; i<efficiencyBo.getDepartmentIdBos().size() ;i++){
                    Efficiency efficiency =new Efficiency();
                    efficiency.setCreateTime(Calendar.getInstance().getTime());
                    efficiency.setProjectName(efficiencyBo.getProjectNameBo());
                    //获取项目id
                    if(null != project && null != project.getId()){
                        efficiency.setProjectId(project.getId().intValue());
                    }
                    
                    if(null != efficiencyBo.getDepartmentIdBos().get(i)){
                        det = departmentDao.findOne((efficiencyBo.getDepartmentIdBos().get(i)).longValue());
                        if(null != det && null != det.getName() && "" != det.getName()){
                            efficiency.setDepartmentName(det.getName()); 
                        }
                        efficiency.setDepartmentId(efficiencyBo.getDepartmentIdBos().get(i));
                    }
                    //
                    if(null != list && list.size() > 0){
                        if(null != list.get(i) ){
                            if(null != list.get(i).getId()){
                                efficiency.setEmployeId(list.get(i).getId().intValue());
                            }
                            if(null != list.get(i).getCode()){
                                efficiency.setEmployeCode(list.get(i).getCode().intValue()); 
                            }
                            if(null != list.get(i).getName() && "" != list.get(i).getName()){
                                efficiency.setEmployeName(list.get(i).getName());
                            }
                        }
                    }
                    if(null != efficiencyBo.getPlanHoursBos().get(i)){
                        efficiency.setPlanHours(efficiencyBo.getPlanHoursBos().get(i));    
                    }
                    
                    //开始时间 
                    if(null != efficiencyBo.getPlanBeginTimes().get(i) ){
                        efficiency.setPlanBeginTime(this.stringToDate(efficiencyBo.getPlanBeginTimes().get(i)));
                    }
                    //结束时间
                    if(null != efficiencyBo.getPlanEndTimes().get(i) ){
                        efficiency.setPlanEndTime(this.stringToDate(efficiencyBo.getPlanEndTimes().get(i)));
                    }
                    
                    efficiencyDao.save(efficiency);
                }
            }
        }
    }
    
    /**
     * 封装数据   用于添加 及编辑  时
     * @param efficiencyBo
     * @param project
     * @return
     */
    public  Map<String,Object> addProject(EfficiencyBo efficiencyBo,Project project){
        Map<String,Object> map = new HashMap<String,Object>();
        //创建list 存放对象
        List<Employe> list = new ArrayList<Employe>();
        Employe  ee = new Employe();
        
        project.setName(efficiencyBo.getProjectNameBo());
        String s = "";
        //拼字符串   修改修改
        if(null != efficiencyBo ){
            if(null != efficiencyBo.getEmployeIdBos() && efficiencyBo.getEmployeIdBos().size()>0){
                for(Integer t : efficiencyBo.getEmployeIdBos()){
                    if(null != t ){
                        //更加id查询对象
                        ee = employeDao.findOne(t.longValue());
                        list.add(ee);//放入list
                        if(null != ee && null != ee.getName() && "" != ee.getName()){
                            s=s+ee.getName()+",";
                        }
                    }
                }
                //去掉 字符串最后一个逗号
                if(null != s && "" != s){
                    s=s.substring(0,s.length()-1);
                }
            }
            //开始时间 
            if(null != efficiencyBo.getPlanBeginTimes() ){
                for(int  i=0 ;i<efficiencyBo.getPlanBeginTimes().size();i++){
                    if(null != efficiencyBo.getPlanBeginTimes().get(i) && "" != efficiencyBo.getPlanBeginTimes().get(i)){
                        project.setProjectBeginTime(this.stringToDate(efficiencyBo.getPlanBeginTimes().get(i)));
                        break;
                    }
                }
            }
            //结束时间
            if(null != efficiencyBo.getPlanEndTimes() ){
                for(String end : efficiencyBo.getPlanEndTimes()){
                    if(null != end){
                        project.setProjectEndTime(this.stringToDate(end));
                    }
                }
            }
        }
        project.setProjectPersonnel(s);
        
        map.put("list", list);
        map.put("project", project);
        return  map ;
    }
    
    /**
     * 字符串  转换成 时间
     * @param str
     * @return
     */
    public static Date stringToDate(String str) {  
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");  
        Date date = null;  
        try {  
            // Fri Feb 24 00:00:00 CST 2012  
            date = format.parse(str);   
        } catch (ParseException e) {  
            e.printStackTrace();  
        }  
        return date;  
    }


}
