package com.ync365.oa.service.specialty;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import com.ync365.oa.entity.Employe;
import com.ync365.oa.entity.Specialty;
import com.ync365.oa.entity.SpecialtyJX;
import com.ync365.oa.repository.EmployeDao;
import com.ync365.oa.repository.SpecialtyDao;
import com.ync365.oa.repository.SpecialtyJXDao;

/**
 * 专业性--绩效的业务逻辑类
 * @author lyh
 *
 */
@Component
@Transactional
public class SpecialtyJXService {
	@Autowired
	private SpecialtyJXDao specialtyJXDao;
	@Autowired
	private SpecialtyDao specialtyDao;
	@Autowired
	private EmployeDao employeDao;
	/**
	 * 初始化绩效列表(此方法在定时任务中调用)
	 * @param SpecialtyJX
	 */
	public void initSpecialtyJXList(){	
		//得到所有部门的所有专业性
		List<Specialty> specialtyList = (List<Specialty>)specialtyDao.findAll();
		//得到所有员工
		List<Employe> employeList = (List<Employe>)employeDao.findAll();		
		if(specialtyList!=null&&specialtyList.size()>0){			
			for (Specialty specialty : specialtyList) {
				for (Employe employe : employeList) {				
					if(employe.getDepartmentId()==specialty.getDepartmentId()){
						SpecialtyJX specialtyJX = new SpecialtyJX();
						specialtyJX.setDepartmentId(employe.getDepartmentId());
						specialtyJX.setDepartmentName(employe.getDepartmentName());
						specialtyJX.setSpecialtyId(specialty.getId());
						specialtyJX.setSpecialtyName(specialty.getName());
						specialtyJX.setBeEvaluatedId(employe.getId());
						specialtyJX.setBeEvaluatedName(employe.getName());						
						/*Calendar calendar = Calendar.getInstance();      
					    calendar.add(Calendar.MONTH, -1);//得到前一个月时间   											
						specialtyJX.setCreateTime(calendar.getTime());	*/	
						specialtyJX.setCreateTime(new Date());
						specialtyJXDao.save(specialtyJX);
					}					
				}
			}
		}		
	}	
	
	/**
	 * 按月份获取某个员工的专业性评价
	 * @return
	 */
	public List<SpecialtyJX> getSpecialtyJXByEmployeId(final Long beEvaluatedId,final String createTime){	
		Specification<SpecialtyJX> spec = new Specification<SpecialtyJX>() {
			@Override
			public Predicate toPredicate(Root<SpecialtyJX> root,CriteriaQuery<?> query, CriteriaBuilder cb) {	
				List<Predicate> predList = new ArrayList<Predicate>();
				predList.add(cb.and(cb.equal(root.get("beEvaluatedId"), beEvaluatedId)));
				 if (createTime != null) {
                    SimpleDateFormat f = new SimpleDateFormat("yyyy-MM");
                    predList.add(cb.equal(cb.substring(root.get("createTime").as(String.class), 1, 7),
                            f.format(createTime)));
	             }				 
				 Predicate[] ps = new Predicate[predList.size()];
                 query.where(cb.and(predList.toArray(ps)));                
                 return query.getGroupRestriction();
			}			
		};
		List<SpecialtyJX> list = specialtyJXDao.findAll(spec);
		if(list!=null&&list.size()>0){
			Double totalScore = 0d;
			for (SpecialtyJX specialtyJX : list) {
				//计算某个被评价人的专业性总分
				totalScore += specialtyJX.getScore();				
			}
			SpecialtyJX specJX = list.get(0);
			specJX.setTotalScore(totalScore);
		}
		return list;		
	}
	
	/**
	 * 按月份获取某个MT负责人下的所有员工的专业性评价列表(本月评价上个月的)
	 * @return
	 */
	public List<SpecialtyJX> getAllSpecialtyJXByEvaluatedId(final Long evaluateId,final String createTime){			
		final Employe employe = employeDao.findOne(evaluateId);			
		Specification<SpecialtyJX> spec = new Specification<SpecialtyJX>() {
			@Override
			public Predicate toPredicate(Root<SpecialtyJX> root,CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predList = new ArrayList<Predicate>();
				predList.add(cb.and(cb.equal(root.get("departmentId"), employe.getDepartmentId())));				
				if (createTime != null) {
                    SimpleDateFormat f = new SimpleDateFormat("yyyy-MM");
                    predList.add(cb.equal(cb.substring(root.get("createTime").as(String.class), 1, 7),
                            f.format(createTime)));
	             }		
				Predicate[] ps = new Predicate[predList.size()];
                query.where(cb.and(predList.toArray(ps)));               
                //query.groupBy(root.get("beEvaluatedId"));
                return query.getGroupRestriction();
			}			
		};
		List<SpecialtyJX> list = specialtyJXDao.findAll(spec);
		if(list!=null&&list.size()>0){				
			for (SpecialtyJX specialtyJX : list) {				
				List<Employe> employeList = getEmployesByDepartmentId(employe.getDepartmentId());
				for (Employe emp : employeList) {
					List<SpecialtyJX> employeJX = getSpecialtyJXByEmployeId(emp.getId(),createTime);
					if(specialtyJX.getBeEvaluatedId()==emp.getId()){
						specialtyJX.setSpecialtyJXList(employeJX);						
					}					
				}						
			}						
			List<Specialty> specialtyList = getSpecialtyListByDepartmentId(employe.getDepartmentId());			
			SpecialtyJX specJX = list.get(0);
			specJX.setSpecialtyList(specialtyList);		
		}		
		return list;	
	}		
	
	
	/**
	 * 专业性--绩效评价或修改绩效评价(每月1号至3号可以修改或评价上个月的专业性)
	 */
	public void evaluate(List<SpecialtyJX> specialtyJXlist,int operation){	
		Date date = new Date();		
		SimpleDateFormat f = new SimpleDateFormat("yyyyMMdd");//比如20151202
		String formatDate = f.format(date);
		String substring = formatDate.substring(6, 8);
		switch (substring) {
		case "01":
		case "02":
		case "03":
			if(specialtyJXlist!=null&&specialtyJXlist.size()>0){
				for (SpecialtyJX specialtyJX : specialtyJXlist) {
					if(operation==1){
						specialtyJX.setEvaluateTime(new Date());//评价时间
					}
					if(operation==2){
						specialtyJX.setUpdateTime(new Date());//修改时间
					}					
					specialtyJXDao.save(specialtyJX);			
				}
			}	
			break;
		default:
			break;
		}		
	}
	
	/**
	 * 获取某个部门的最新的专业性(如果本月未添加，则取上个月的)
	 * @param departmentId
	 * @param createTimeAdd
	 * @return
	 */
	public List<Specialty> getSpecialtyListByDepartmentId(final Long departmentId){
		
		//查询该部门所有的专业性
		Specification<Specialty> spec1 = new Specification<Specialty>() {
			@Override
			public Predicate toPredicate(Root<Specialty> root,CriteriaQuery<?> query, CriteriaBuilder cb) {				
				query.where(cb.and(cb.equal(root.get("departmentId"), departmentId)));
				//按照添加时间降序排列
				query.orderBy(cb.desc(root.get("createTime").as(Date.class)));
				return query.getGroupRestriction();
			}			
		};	
		List<Specialty> allSpecialtyList = specialtyDao.findAll(spec1);	
		
		//取出第一条，即该部门最新的专业性
		Specialty specialty = allSpecialtyList.get(0);
		//专业性添加时间
		final Date createTimeAdd = specialty.getCreateTime();	

		Specification<Specialty> spec2 = new Specification<Specialty>() {
			@Override
			public Predicate toPredicate(Root<Specialty> root,CriteriaQuery<?> query, CriteriaBuilder cb) {				
				List<Predicate> predList = new ArrayList<Predicate>();
				predList.add(cb.and(cb.equal(root.get("departmentId"), departmentId)));
				 if (createTimeAdd != null) {
                    SimpleDateFormat f = new SimpleDateFormat("yyyy-MM");
                    predList.add(cb.equal(cb.substring(root.get("createTime").as(String.class), 1, 7),
                            f.format(createTimeAdd)));
	             }				 
				 Predicate[] ps = new Predicate[predList.size()];
                 query.where(cb.and(predList.toArray(ps)));                
                 return query.getGroupRestriction();
			}			
		};	
		List<Specialty> specialtyList = specialtyDao.findAll(spec2);	
		
		return specialtyList;
	}
	
	/**
	 * 获取某个部门下的所有员工
	 * @return
	 */
	public List<Employe> getEmployesByDepartmentId(final Long departmentId){
		Specification<Employe> spec = new Specification<Employe>() {
			@Override
			public Predicate toPredicate(Root<Employe> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {				
				return cb.and(cb.equal(root.get("departmentId"),departmentId));
			}			
		};		
		return employeDao.findAll(spec);
	}	
	
	/**
	 * 组装绩效列表(此方法暂不使用)
	 * 
	 */
	public List<SpecialtyJX> assembleSpecialtyJXList(final Long departmentId,final String createTime){
		
		//得到该部门下的所有员工
		List<Employe> employeLsit = getEmployesByDepartmentId(departmentId);
		List<SpecialtyJX> specialtyJXList = new ArrayList<SpecialtyJX>();
		if(employeLsit!=null&&employeLsit.size()>0){			
			for (Employe employe : employeLsit) {
				SpecialtyJX jx1 = new SpecialtyJX();
				jx1.setDepartmentId(employe.getDepartmentId());
				jx1.setDepartmentName(employe.getDepartmentName());
				jx1.setBeEvaluatedId(employe.getId());
				jx1.setBeEvaluatedName(employe.getName());			
				specialtyJXList.add(jx1);
			}
		}
		
		//得到该部门下的所有专业性(上个月的)
		Specification<Specialty> spec = new Specification<Specialty>() {
			@Override
			public Predicate toPredicate(Root<Specialty> root,CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predList = new ArrayList<Predicate>();
				predList.add(cb.and(cb.equal(root.get("departmentId"), departmentId)));	                           				
				Predicate[] ps = new Predicate[predList.size()];
                query.where(cb.and(predList.toArray(ps))); 
                query.orderBy(cb.desc(root.get("createTime").as(Date.class)));
                return query.getGroupRestriction();
			}			
		};		
		List<Specialty> specialtyList = specialtyDao.findAll(spec);
		
		//组装数据
		if(specialtyList!=null&&specialtyList.size()>0){
			int times = 1;
			for (Specialty specialty : specialtyList) {
				for (SpecialtyJX specialtyJX : specialtyJXList) {
					if(times==1){//第一次执行外循环
						specialtyJX.setSpecialtyId(specialty.getId());
						specialtyJX.setSpecialtyName(specialty.getName());
						specialtyJX.setCreateTime(specialty.getCreateTime());						
						specialtyJXDao.save(specialtyJX);					
					}else{//第二次以上执行外循环
						SpecialtyJX jx2 = new SpecialtyJX();						
						jx2.setDepartmentId(specialtyJX.getDepartmentId());
						jx2.setDepartmentName(specialtyJX.getDepartmentName());	
						jx2.setSpecialtyId(specialty.getId());
						jx2.setSpecialtyName(specialty.getName());						
						jx2.setBeEvaluatedId(specialtyJX.getBeEvaluatedId());
						jx2.setBeEvaluatedName(specialtyJX.getBeEvaluatedName());						
						jx2.setCreateTime(specialty.getCreateTime());
						specialtyJXDao.save(jx2);					
					}				
				}
				times++;
			}
		}
		return specialtyJXList;
	}
}
