package com.ync365.oa.service.project;

 
import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.ync365.oa.entity.Project;
import com.ync365.oa.query.ProjectQuery;
import com.ync365.oa.repository.ProjectDao;

@Component
@Transactional
public class ProjectService {
    
    private static Logger logger = LoggerFactory.getLogger(ProjectService.class);
    
    @Autowired
    private ProjectDao projectDao;

    public Project findById(int proId) {
        return projectDao.findOne( new Long(proId));
    }
    
    /*
     * 查看项目列表
     * */
    public List<Project> find(final ProjectQuery p){
    	Specification<Project> sp=new Specification<Project>() {
			@Override
			public Predicate toPredicate(Root<Project> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				// TODO Auto-generated method stub
				List<Predicate> list =new ArrayList<>();
				if(p.getId()!=null){
					list.add(cb.equal(root.get("id").as(Long.class), p.getId()));
				}
				if(StringUtils.isNotEmpty(p.getName())){
					list.add(cb.equal(root.get("name").as(String.class), p.getName()));
				}
				if(StringUtils.isNotEmpty(p.getPm())){
					list.add(cb.equal(root.get("pm").as(String.class), p.getPm()));
				}
				if(p.getState()!=null){
					list.add(cb.equal(root.get("state").as(Integer.class), p.getState()));
				}
				
				Predicate[] ps= new Predicate[list.size()];
				query.where(cb.and(list.toArray(ps)));
				if (StringUtils.isNotEmpty(p.getSort())) {
                    query.orderBy(cb.desc(root.get(p.getSort())));
                }
				return query.getGroupRestriction();
			}
		};
		List<Project> plist =projectDao.findAll(sp);
		if(p.getProjectEmploye()!=null){
			List<Project> list=new ArrayList<Project>();
			for(Project project:plist){
				String[]  strs=project.getProjectPersonnel().split(",");
				for(String s:strs){
					if(s.equals(p.getProjectEmploye())){
						list.add(project);
						break;
					}
				}
			}
			return list;
		}else{
			return plist;
		}
    }
    public List<Project> findAll() {
        return  (List<Project>) projectDao.findAll();
    }
    
}
