package com.ync365.oa.service.department;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;

import com.ync365.oa.bo.DepartmentBo;
import com.ync365.oa.entity.Department;
import com.ync365.oa.query.DepartmentQuery;
import com.ync365.oa.repository.DepartmentDao;

@Component
@Transactional
public class DepartmentService {
	private static Logger logger=LoggerFactory.getLogger(DepartmentService.class);
	
	@Autowired
	private DepartmentDao departmentDao;
	
	//添加部门
	public void add(Department d){
		d.setCreateTime(Calendar.getInstance().getTime());
		departmentDao.save(d);
	}
	
	//查看单个员工
	public Department findOne(Long id){
		return departmentDao.findOne(id);
	}
	
	//编辑员工
	public void update(Department  d){
		d.setCreateTime(Calendar.getInstance().getTime());
		departmentDao.save(d);
	}
	
	//删除部门
	public void delete(Long id){
		departmentDao.delete(id);
	}
	
	//查询员工类表
	public Page<DepartmentBo> find(final DepartmentQuery d){
		Specification<DepartmentBo> sp=new Specification<DepartmentBo>() {

			@Override
			public Predicate toPredicate(Root<DepartmentBo> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				// TODO Auto-generated method stub
				List<Predicate> list=new ArrayList<>();
				if(d.getId()!=null){
					list.add(cb.equal(root.get("id").as(Long.class),d.getId()));
				}
				if(StringUtils.isNotEmpty(d.getMt())){
					list.add(cb.equal(root.get("mt").as(String.class), d.getMt()));
				}
				if(StringUtils.isNotEmpty(d.getDepartmentName())){
					list.add(cb.equal(root.get("name"), d.getDepartmentName()));
				}
				if(StringUtils.isNotEmpty(d.getE().getName())){
					list.add(cb.equal(root.get("es").get("name").as(String.class), d.getE().getName()));
				}
				Predicate[] ps = new Predicate[list.size()];
                query.where(cb.and(list.toArray(ps)));
                if (StringUtils.isNotEmpty(d.getSort())) {
                    query.orderBy(cb.desc(root.get(d.getSort())));
                }
				return query.getGroupRestriction();
			}
		};
		PageRequest pageRequest =null ;
		if (d.getPageIndex() != null && d.getPageSize() != null) {
            pageRequest = new PageRequest(d.getPageIndex(), d.getPageSize());
        }
		Page<DepartmentBo> pages=null;
		pages=departmentDao.findAll(sp,pageRequest);
		return pages;
	}
}
