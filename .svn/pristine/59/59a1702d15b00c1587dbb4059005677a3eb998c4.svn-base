package com.ync365.oa.service.efficiency;

import java.lang.reflect.InvocationTargetException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.beanutils.PropertyUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.collect.Maps;
import com.ync365.commons.utils.StringUtils;
import com.ync365.oa.bo.EfficiencyBo;
import com.ync365.oa.bo.EfficiencyProjectBo;
import com.ync365.oa.bo.EfficiencyViewVo;
import com.ync365.oa.entity.Department;
import com.ync365.oa.entity.Efficiency;
import com.ync365.oa.entity.Employe;
import com.ync365.oa.entity.Project;
import com.ync365.oa.entity.ProjectChange;
import com.ync365.oa.query.EfficiencyQuery;
import com.ync365.oa.repository.DepartmentDao;
import com.ync365.oa.repository.EfficiencyDao;
import com.ync365.oa.repository.EmployeDao;
import com.ync365.oa.repository.ProjectChangeDao;
import com.ync365.oa.repository.ProjectDao;


@Component
@Transactional
public class EfficiencyService {
    
    private static Logger logger = LoggerFactory.getLogger(EfficiencyService.class);
    
    @Autowired
    private EfficiencyDao efficiencyDao;
    
    @Autowired
    private ProjectDao projectDao;
    
    @Autowired
    private DepartmentDao departmentDao;
    
    @Autowired
    private EmployeDao employeDao;
    
    @Autowired
    private ProjectChangeDao projectChangeDao;
    
    /**
     * 添加   效能新建添加方法
     * @param efficiencyBo
     */
    public void add(EfficiencyBo efficiencyBo) {
        
        Project project_t = new Project();
        //添加 project
        Map<String,Object> mapT = this.addProject(efficiencyBo,project_t);
        Project project = (Project) mapT.get("project");
        //添加创建时间
        project.setCreateTime(Calendar.getInstance().getTime());
        //调用保存方法
        projectDao.save(project);

        //添加到efficiency 
        addEff(efficiencyBo,mapT);
        
    }
    

    /**
     * 更加projectid查询List<Efficiency>
     * @param proId
     * @return
     */
    public List<Efficiency> findByProjectId(int proId) {
        return efficiencyDao.findByProjectId(proId);
    }
    
    
    /**
     * 更加projectid查询List<EfficiencyViewVo>
     * 添加查询 部门对应的所有 员工list列表
     * @param proId
     * @return
     */
    public List<EfficiencyViewVo> findListByProjectId(int proId) {
        List<EfficiencyViewVo> efficiencyViewVoList = new ArrayList<EfficiencyViewVo>();
        
        List<Efficiency> efficiencylist = efficiencyDao.findByProjectId(proId);
        
        List<Employe> employeList = null;
        if(null != efficiencylist && efficiencylist.size() > 0 ){
            for(Efficiency temp : efficiencylist){
                EfficiencyViewVo efficiencyViewVo = new EfficiencyViewVo();
                BeanUtils.copyProperties(temp, efficiencyViewVo);
                /*try {
                    PropertyUtils.copyProperties(efficiencyViewVo, temp);
                } catch (IllegalAccessException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } catch (InvocationTargetException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                } catch (NoSuchMethodException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
                */
                employeList = employeDao.findByDepartmentId(temp.getDepartmentId().longValue());
                efficiencyViewVo.setEmployeList(employeList);
                efficiencyViewVoList.add(efficiencyViewVo);
            }
        }
        return efficiencyViewVoList;
    }
    
    /**
     * 编辑 
     * @param efficiencyBo
     */
    public void edit(EfficiencyBo efficiencyBo) {
        //根据project 主键id查询已经存在的project对象
        Project project_t  = projectDao.findOne(efficiencyBo.getProId());
        //添加 project
        Map<String,Object> mapT = this.addProject(efficiencyBo,project_t);
        Project project = (Project) mapT.get("project");
        //更新对象
        projectDao.save(project);
        
        if(null != efficiencyBo.getEfficiencyIds() && efficiencyBo.getEfficiencyIds().size() > 0){
            //根据项目id去efficiency查询此项目id下所有的参与人员
            List<Efficiency> old_eff_list = this.findByProjectId(Integer.parseInt(String.valueOf(efficiencyBo.getProId())));
            //如果old_eff_list 为null  则else  新增保存
            if(null != old_eff_list && old_eff_list.size() > 0){
                //用户存放新增的集合
                /*List<Long> add_list_ids = new ArrayList<Long>();*/
                List<Integer> add_list_departmentIdBos = new ArrayList<Integer>(); //部门名称 list
                List<Integer> add_list_employeIdBos = new ArrayList<Integer>(); //员工姓名 list
                List<Integer> add_list_planHoursBos = new ArrayList<Integer>();//计划时长
                List<String> add_list_planBeginTimes = new ArrayList<String>();//计划开始时间
                List<String> add_list_planEndTimes = new ArrayList<String>();//计划结束时间
                
                //存放需要修改的集合
                List<Efficiency> udate_list= new ArrayList<Efficiency>();
                
                //存放需要删除的集合
                List<Efficiency> del_list= new ArrayList<Efficiency>();
                
                //通过2个集合 循环判断 
                //1.新增的列表中存在原有的数据  确定为  需要修改
                //2、新增的列表中不存在原有的数据  确定为需要删除
                for(Efficiency temp : old_eff_list){
                    if(null != temp.getId()){
                        if(efficiencyBo.getEfficiencyIds().contains(temp.getId())){
                            //需要更新的集合
                            udate_list.add(temp);
                        }else{
                            //需要删除的集合
                            del_list.add(temp);
                        }
                    }
                }
                
                //创建 员工 列表 存放Employe对象
                List<Employe> list_employe = new ArrayList<Employe>();
                Employe ee_emp = new Employe();
                //修改时  新增的数据
                //编辑保存 时   新提交的列表 efficiencyBo.getEfficiencyIds() 中 的数据没有存在于 原有数据中 为新增数据
                for(int i=0 ; i< efficiencyBo.getEfficiencyIds().size() ; i++){
                    if(null == efficiencyBo.getEfficiencyIds().get(i) && null != efficiencyBo.getDepartmentIdBos().get(i)){
                        add_list_departmentIdBos.add(efficiencyBo.getDepartmentIdBos().get(i));
                        add_list_employeIdBos.add(efficiencyBo.getEmployeIdBos().get(i));
                        add_list_planHoursBos.add(efficiencyBo.getPlanHoursBos().get(i));
                        add_list_planBeginTimes.add(efficiencyBo.getPlanBeginTimes().get(i));
                        add_list_planEndTimes.add(efficiencyBo.getPlanEndTimes().get(i));
                        
                        //根据员工id查询对象
                        if(null != efficiencyBo.getEmployeIdBos() && null != efficiencyBo.getEmployeIdBos().get(i)){
                            ee_emp = employeDao.findOne(efficiencyBo.getEmployeIdBos().get(i).longValue());
                            list_employe.add(ee_emp);
                        }
                        
                        //创建 EfficiencyBo 对象 封装数据 
                        EfficiencyBo efficiencyBo_new = new EfficiencyBo();
                        efficiencyBo_new.setDepartmentIdBos(add_list_departmentIdBos);
                        efficiencyBo_new.setEmployeIdBos(add_list_employeIdBos);
                        efficiencyBo_new.setPlanBeginTimes(add_list_planBeginTimes);
                        efficiencyBo_new.setPlanEndTimes(add_list_planEndTimes);
                        efficiencyBo_new.setPlanHoursBos(add_list_planHoursBos);
                        efficiencyBo_new.setProjectNameBo(efficiencyBo.getProjectNameBo());
                        mapT.put("list",list_employe);
                        addEff(efficiencyBo_new,mapT);
                    }
                }
                
                
                //删除修改之后不要的数据
                if(null != del_list && del_list.size() > 0 ){
                    efficiencyDao.delete(del_list);
                }
                
                //修改时  需要修改的 数据
                if(null != udate_list && udate_list.size() > 0){
                    updateEff(udate_list,efficiencyBo);
                }
            }else{
                addEff(efficiencyBo,mapT);
            }
        }
    }
    
    /**
     * 封装更新 efficiency
     * @param udate_list
     * @param efficiencyBo
     */
    private void updateEff(List<Efficiency> udate_list, EfficiencyBo efficiencyBo) {
        if(null != udate_list &&  udate_list.size() > 0){
            Department det_t = new Department();
            Employe  ee_t = new Employe();
            for(Efficiency eff_t : udate_list){
                List<Long> list_t_t = efficiencyBo.getEfficiencyIds() ;
                if(null  != efficiencyBo && null !=  list_t_t && list_t_t.size() > 0){
                    for(int i =0 ; i< list_t_t.size() ;i++){
                        if(null != list_t_t.get(i) &&  eff_t.getId() == list_t_t.get(i)){
                            eff_t.setEmployeName(efficiencyBo.getProjectNameBo());
                            
                            eff_t.setPlanBeginTime(this.stringToDate(efficiencyBo.getPlanBeginTimes().get(i)));
                            eff_t.setActualBeginTime(this.stringToDate(efficiencyBo.getPlanBeginTimes().get(i)));
                            eff_t.setOutputBeginTime(this.stringToDate(efficiencyBo.getPlanBeginTimes().get(i)));
                            
                            eff_t.setPlanEndTime(this.stringToDate(efficiencyBo.getPlanEndTimes().get(i)));
                            eff_t.setActualEndTime(this.stringToDate(efficiencyBo.getPlanEndTimes().get(i)));
                            eff_t.setOutputEndTime(this.stringToDate(efficiencyBo.getPlanEndTimes().get(i)));
                            
                            eff_t.setPlanHours(efficiencyBo.getPlanHoursBos().get(i));
                            eff_t.setActualHours(efficiencyBo.getPlanHoursBos().get(i));
                            eff_t.setOutputHours(efficiencyBo.getPlanHoursBos().get(i));
                            
                            if(null != efficiencyBo.getDepartmentIdBos().get(i)){
                                //根据id查询对象
                                det_t = departmentDao.findOne((efficiencyBo.getDepartmentIdBos().get(i)).longValue());
                                if(null != det_t && null != det_t.getName() && "" != det_t.getName()){
                                    eff_t.setDepartmentName(det_t.getName()); 
                                }
                                eff_t.setDepartmentId(efficiencyBo.getDepartmentIdBos().get(i));
                            }
                            if(null != efficiencyBo.getEmployeIdBos().get(i)){
                                //更加id查询对象
                                ee_t = employeDao.findOne(efficiencyBo.getEmployeIdBos().get(i).longValue());
                                if(null != ee_t){
                                    eff_t.setEmployeCode(ee_t.getCode());
                                    eff_t.setEmployeId(ee_t.getId().intValue());
                                    eff_t.setEmployeName(ee_t.getName());
                                }
                            }
                            //保存数据
                            efficiencyDao.save(eff_t);
                            break;
                            
                        }
                    }
                }
            }
        }
    }


    /**
     * 封装添加 EfficiencyBo 方法
     * @param efficiencyBo
     * @param mapT
     */
    public void addEff(EfficiencyBo efficiencyBo,Map<String,Object> mapT){
        //创建部门 Department  对象
        Department det = new Department();
        //map中获取 project 及 list 数据
        Project project = (Project) mapT.get("project");
        List<Employe> list = (List<Employe>) mapT.get("list");
        
        if(null != efficiencyBo){
            //判断部门id是否为空
            if(null != efficiencyBo.getDepartmentIdBos() && efficiencyBo.getDepartmentIdBos().size() > 0){
                for(int i=0 ; i<efficiencyBo.getDepartmentIdBos().size() ;i++){
                    //创建Efficiency 对象
                    Efficiency efficiency =new Efficiency();
                    efficiency.setCreateTime(Calendar.getInstance().getTime());
                    efficiency.setProjectName(efficiencyBo.getProjectNameBo());
                    //获取项目id —— ProjectId
                    if(null != project && null != project.getId()){
                        efficiency.setProjectId(project.getId().intValue());
                    }
                    
                    //判断部门id  根据部门id查询部门对象
                    if(null != efficiencyBo.getDepartmentIdBos().get(i)){
                        det = departmentDao.findOne((efficiencyBo.getDepartmentIdBos().get(i)).longValue());
                        if(null != det && null != det.getName() && "" != det.getName()){
                            efficiency.setDepartmentName(det.getName()); 
                        }
                        efficiency.setDepartmentId(efficiencyBo.getDepartmentIdBos().get(i));
                    }
                    //从已经查询出来的员工集合中取得数据封装对象
                    if(null != list && list.size() > 0){
                        if(null != list.get(i) ){
                            if(null != list.get(i).getId()){
                                efficiency.setEmployeId(list.get(i).getId().intValue());
                            }
                            if(null != list.get(i).getCode()){
                                efficiency.setEmployeCode(list.get(i).getCode()); 
                            }
                            if(null != list.get(i).getName() && "" != list.get(i).getName()){
                                efficiency.setEmployeName(list.get(i).getName());
                            }
                        }
                    }
                    //添加计划时间
                    if(null != efficiencyBo.getPlanHoursBos().get(i)){
                        efficiency.setPlanHours(efficiencyBo.getPlanHoursBos().get(i));    
                        efficiency.setActualHours(efficiencyBo.getPlanHoursBos().get(i));
                        efficiency.setOutputHours(efficiencyBo.getPlanHoursBos().get(i));
                    }
                    
                    //开始时间 
                    if(null != efficiencyBo.getPlanBeginTimes().get(i) ){
                        efficiency.setPlanBeginTime(this.stringToDate(efficiencyBo.getPlanBeginTimes().get(i)));
                        efficiency.setActualBeginTime(this.stringToDate(efficiencyBo.getPlanBeginTimes().get(i)));
                        efficiency.setOutputBeginTime(this.stringToDate(efficiencyBo.getPlanBeginTimes().get(i)));
                    }
                    //结束时间
                    if(null != efficiencyBo.getPlanEndTimes().get(i) ){
                        efficiency.setPlanEndTime(this.stringToDate(efficiencyBo.getPlanEndTimes().get(i)));
                        efficiency.setActualEndTime(this.stringToDate(efficiencyBo.getPlanEndTimes().get(i)));
                        efficiency.setOutputEndTime(this.stringToDate(efficiencyBo.getPlanEndTimes().get(i)));
                    }
                    //保存efficiency对象
                    efficiencyDao.save(efficiency);
                    
                    //添加 project_change信息
                    addProjectChange(efficiency,project);
                }
            }
        }
    }
    
    /**
     * 添加project_change信息
     * @param efficiency
     * @param project
     */
    private void addProjectChange(Efficiency efficiency, Project project) {
        ProjectChange record = new ProjectChange();
        String after = "";
        record.setCreateTime(Calendar.getInstance().getTime());
        record.setEfficiencyId(efficiency.getId().intValue());
        record.setProjectId(project.getId().intValue());
        if(null != efficiency){
            after = after + efficiency.getEmployeName()+"," + efficiency.getDepartmentName() +","
                    + "周期"+efficiency.getActualBeginTime()+"至"+efficiency.getActualBeginTime()+","
                    +"工时"+efficiency.getActualHours();
        }
        record.setChangeAfter(after);
        projectChangeDao.save(record);
    }


    /**
     * 封装数据   用于添加 及编辑  时
     * @param efficiencyBo
     * @param project
     * @return
     */
    public  Map<String,Object> addProject(EfficiencyBo efficiencyBo,Project project){
        //创建map对象用于返回值使用
        Map<String,Object> map = new HashMap<String,Object>();
        //创建list 存放 Employe 对象
        List<Employe> list = new ArrayList<Employe>();
        Employe  ee = new Employe();
        
        String s = "";
        //拼字符串   
        if(null != efficiencyBo ){
            if(null != efficiencyBo.getEmployeIdBos() && efficiencyBo.getEmployeIdBos().size()>0){//判断员工id是否为空 
                for(Integer t : efficiencyBo.getEmployeIdBos()){
                    if(null != t ){
                        //更加id查询  Employe 对象
                        ee = employeDao.findOne(t.longValue());
                        list.add(ee);//放入list
                        if(null != ee && null != ee.getName() && "" != ee.getName()){
                            s=s+ee.getName()+",";
                        }
                    }
                }
                //去掉 字符串最后一个逗号
                if(null != s && "" != s){
                    s=s.substring(0,s.length()-1);
                }
            }
            //开始时间 
            if(null != efficiencyBo.getPlanBeginTimes() ){
                for(int  i=0 ;i<efficiencyBo.getPlanBeginTimes().size();i++){
                    if(null != efficiencyBo.getPlanBeginTimes().get(i) && "" != efficiencyBo.getPlanBeginTimes().get(i)){
                        project.setProjectBeginTime(this.stringToDate(efficiencyBo.getPlanBeginTimes().get(i)));
                        break;
                    }
                }
            }
            //结束时间
            if(null != efficiencyBo.getPlanEndTimes() ){
                for(String end : efficiencyBo.getPlanEndTimes()){
                    if(null != end){
                        project.setProjectEndTime(this.stringToDate(end));
                    }
                }
            }
        }
        project.setName(efficiencyBo.getProjectNameBo());
        project.setProjectPersonnel(s);
        //放入map中返回
        map.put("list", list);
        map.put("project", project);
        return  map ;
    }
    
    /**
     * 字符串  转换成 时间
     * @param str
     * @return
     */
    public static Date stringToDate(String str) {  
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd");  
        Date date = null;  
        try {  
            // Fri Feb 24 00:00:00 CST 2012  
            date = format.parse(str);   
        } catch (ParseException e) {  
            e.printStackTrace();  
        }  
        return date;  
    }


    public Page<Efficiency> findEfficiencyAll(final EfficiencyQuery q) {
        Specification<Efficiency> sp = new Specification<Efficiency>() {

            @Override
            public Predicate toPredicate(Root<Efficiency> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
                List<Predicate> list = new ArrayList<>();
                if (StringUtils.isNotEmpty(q.getEmployeName())) {
                    list.add(cb.equal(root.get("employeName").as(String.class), q.getEmployeName()));
                }
                if (q.getEmployeCode() != null) {
                    list.add(cb.equal(root.get("employeCode").as(Integer.class), q.getEmployeCode()));
                }
                if (StringUtils.isNotEmpty(q.getProjectName())) {
                    list.add(cb.equal(root.get("projectName").as(String.class), q.getProjectName()));
                }
                if (q.getPlanHours() != null) {
                    list.add(cb.equal(root.get("planHours").as(Integer.class), q.getPlanHours()));
                }
                if (q.getActualHours() != null) {
                    list.add(cb.equal(root.get("actualHours").as(Integer.class), q.getActualHours()));
                }
                if (q.getProjectId() != null) {
                    list.add(cb.equal(root.get("projectId").as(Integer.class), q.getProjectId()));
                }
                if (q.getOutputHours() != null) {
                    list.add(cb.equal(root.get("outputHours").as(Integer.class), q.getOutputHours()));
                }
                if (StringUtils.isNotEmpty(q.getPm())) {
                    list.add(cb.equal(root.get("pm").as(String.class), q.getPm()));
                }
                
                Predicate[] ps = new Predicate[list.size()];
                query.where(cb.and(list.toArray(ps)));
                if (StringUtils.isNotEmpty(q.getSort())) {
                    query.orderBy(cb.desc(root.get(q.getSort())));
                }
                return query.getGroupRestriction();
            }
        };
        PageRequest pageRequest = null;
        if (q.getPageIndex() != null && q.getPageSize() != null) {
            pageRequest = new PageRequest(q.getPageIndex(), q.getPageSize());
        }
        Page<Efficiency> pageList = efficiencyDao.findAll(sp, pageRequest);
        return pageList;
    }


    /**
     * 
     * @param id
     * @return
     */
    public EfficiencyProjectBo findEfficiencyProjectById(Long id) {
        EfficiencyProjectBo efficiencyProjectBo = new EfficiencyProjectBo();
        Efficiency  efficiency = efficiencyDao.findOne(id);
        Project project = null;
        if(null != efficiency && null != efficiency.getProjectId()){
            project = projectDao.findOne(efficiency.getProjectId().longValue());
        }
        if(null != project && null != project.getState()){
            efficiencyProjectBo.setState(project.getState());
        }
        efficiencyProjectBo.setPlanHours(efficiency.getPlanHours());
        efficiencyProjectBo.setActualHours(efficiency.getActualHours());
        
        efficiencyProjectBo.setPlanBeginTime(efficiency.getPlanBeginTime());
        efficiencyProjectBo.setOutputHours(efficiency.getOutputHours());
        
        efficiencyProjectBo.setEfficiencyPercentage(efficiency.getEfficiencyPercentage());
        efficiencyProjectBo.setLoadRate(efficiency.getLoadRate());
        
        efficiencyProjectBo.setEmployeName(efficiency.getEmployeName());
        efficiencyProjectBo.setEmployeCode(efficiency.getEmployeCode());
        
        efficiencyProjectBo.setPm(efficiency.getPm());
        efficiencyProjectBo.setName(efficiency.getProjectName());
        
        return efficiencyProjectBo;
    }


    /**
     * 录入工时 解析方法
     * @param hours
     * @param id
     * @param i 
     * @return
     */
    public Efficiency addAhours(int hours, Long id, int i) {
        Efficiency record = new Efficiency();
        Efficiency efficiency = efficiencyDao.findOne(id);
        if(null != efficiency ){
            
            if(1 == i ){
                efficiency.setActualHours(hours);
                record.setActualHours(hours);
                if(null != efficiency.getActualBeginTime()){
                    Date t= add_date(efficiency.getActualBeginTime(),hours);
                    efficiency.setActualBeginTime(t);
                    record.setActualBeginTime(t);
                }
                if(null != efficiency.getActualEndTime()){
                    Date x= add_date(efficiency.getActualEndTime(),hours);
                    efficiency.setActualEndTime(x);
                    record.setActualEndTime(x);
                }
            }else if(2 == i ){
                efficiency.setOutputHours(hours);
                record.setOutputHours(hours);
                if(null != efficiency.getOutputBeginTime()){
                    Date t= add_date(efficiency.getOutputBeginTime(),hours);
                    efficiency.setOutputBeginTime(t);
                    record.setOutputEndTime(t);
                }
                if(null != efficiency.getOutputEndTime()){
                    Date x= add_date(efficiency.getOutputEndTime(),hours);
                    efficiency.setOutputEndTime(x);
                    record.setOutputEndTime(x);
                }
            }
        }
        return record;
    }


    private Date add_date(Date h, int hours) {
        Long a = h.getTime();
        int t = hours/8;
        Long b = a+((long)t*1000*24*60*60);
        Date date = new Date(b);
        return date;
    }


}
