package com.ync365.oa.service.leaderAssessment;

import java.lang.reflect.InvocationTargetException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

import org.apache.commons.beanutils.PropertyUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Service;
import org.springside.modules.persistence.DynamicSpecifications;
import org.springside.modules.persistence.SearchFilter;
import org.springside.modules.persistence.SearchFilter.Operator;

import com.ync365.commons.utils.StringUtils;
import com.ync365.oa.entity.LeaderAssessment;
import com.ync365.oa.repository.LeaderAssessmentDao;

@Service
@Transactional
public class LeaderAssessmentService {
	
	@Autowired
	private LeaderAssessmentDao assessmentDao;
	

	public LeaderAssessment selectById(long id) {
		LeaderAssessment assessment = assessmentDao.findOne(id);
		return assessment;
	}
	

	public void save(LeaderAssessment assessment) {
		assessmentDao.save(assessment);
	}
	

	public void delete(long id) {
		assessmentDao.delete(id);
	}
	

	public void update(LeaderAssessment assessment) {
		LeaderAssessment assessmengUpdate = selectById(assessment.getId());
		try {
			PropertyUtils.copyProperties(assessmengUpdate, assessment);
			assessmengUpdate.setEvaluatedTime(new Date());
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (InvocationTargetException e) {
			e.printStackTrace();
		} catch (NoSuchMethodException e) {
			e.printStackTrace();
		}
		assessmentDao.save(assessmengUpdate);
	}
	

	public Page<LeaderAssessment> getList(Map<String, Object> searchParams, int pageNumber, int pageSize,
			String sortType) {
		List<LeaderAssessment> countList = null;
		Page<LeaderAssessment> countPage = null;
		
		String scoreStr = (String) searchParams.get("score");
		searchParams.remove("score");
		PageRequest pageRequest = buildPageRequest(pageNumber, pageSize, sortType);
		Specification<LeaderAssessment> spec = buildSpecification(searchParams);
		Page<LeaderAssessment> page = assessmentDao.findAll(spec, pageRequest);
		
		if (StringUtils.isNotBlank(scoreStr)) {
			List<LeaderAssessment> assessmentList = page.getContent();
			countList = new LinkedList<LeaderAssessment>();

			Long socre = Long.parseLong(scoreStr);
			for (int i = 0; i < assessmentList.size(); i++) {
				LeaderAssessment leaderAssessment = assessmentList.get(i);
				Long sssessmentScore = leaderAssessment.getAction1_Score()
									+ leaderAssessment.getAction2_Score()
									+ leaderAssessment.getAction3_Score()
									+ leaderAssessment.getAction4_Score()
									+ leaderAssessment.getAction5_Score();
				if (sssessmentScore == socre) {
					countList.add(leaderAssessment);
				}
			}
			countPage = new PageImpl<LeaderAssessment>(countList, pageRequest, pageSize);
			return countPage;
		} else {
			return page ;
		}
	}

	
	private PageRequest buildPageRequest(int pageNumber, int pagzSize, String sortType) {
		Sort sort = null;
		if ("auto".equals(sortType)) {
			sort = new Sort(Direction.ASC, "id");
		} else if ("title".equals(sortType)) {
			sort = new Sort(Direction.ASC, "title");
		}

		return new PageRequest(pageNumber - 1, pagzSize, sort);
	}


	private Specification<LeaderAssessment> buildSpecification(Map<String, Object> searchParams) {
		
		Map<String, SearchFilter> filters = SearchFilter.parse(searchParams);
		
		if (filters.size()>0) {
			Date gteDate = null;
			Date lteDate = null;
			String gteDateStr = (String) searchParams.get("GTE_evaluatedTime");
			String lteDateStr = (String) searchParams.get("LTE_evaluatedTime");
			try {
				if (StringUtils.isNotBlank(gteDateStr)) {
					gteDate = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").parse(gteDateStr+" 00:00:00");
					filters.put("GTE_evaluatedTime", new SearchFilter("evaluatedTime", Operator.GTE, gteDate));
				}
				if (StringUtils.isNotBlank(lteDateStr)) {
					lteDate = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").parse(lteDateStr+" 23:59:59");
					filters.put("LTE_evaluatedTime", new SearchFilter("evaluatedTime", Operator.LTE, lteDate));
				}
			} catch (ParseException e) {
				e.printStackTrace();
			}
		} 
		
		Specification<LeaderAssessment> spec = DynamicSpecifications.bySearchFilter(filters.values(), LeaderAssessment.class);
		return spec;
	}

}
