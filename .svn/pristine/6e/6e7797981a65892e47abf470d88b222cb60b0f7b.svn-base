package com.ync365.oa.service.satisfaction;

import java.sql.Date;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;

import com.ync365.commons.utils.StringUtils;
import com.ync365.oa.entity.Satisfaction;
import com.ync365.oa.query.SatisfactionQuery;
import com.ync365.oa.repository.SatisfactionDao;

@Component
@Transactional
public class SatisfactionService {

	@Autowired
	private SatisfactionDao satisfactionDao;
	
	private Logger log = LoggerFactory.getLogger(SatisfactionService.class);
	
	/**
	 * 添加插入客户满意度调查
	 * @param satisfaction
	 */
	public Satisfaction add(Satisfaction satisfaction) {
		return satisfactionDao.save(satisfaction);
	}
	/**
	 * 根据id查询客户满意度
	 * @param id
	 * @return
	 */
	public Satisfaction findOne(Long id) {
		return satisfactionDao.findOne(id);
	}
	/**
	 * 更新客户满意度调查
	 * @param satisfaction
	 * @return
	 */
	public Satisfaction update(Satisfaction satisfaction) {
		return satisfactionDao.save(satisfaction);
	}
	/**
	 * 根据查询条件查询列表
	 * @param q
	 * @return
	 */
	public Page<Satisfaction> buildPageRequest(final SatisfactionQuery q) {
        Specification<Satisfaction> sp = buildSpecification(q);
        PageRequest pageRequest = null;
        if (q.getPageIndex() != null && q.getPageSize() != null) {
        	pageRequest = new PageRequest(q.getPageIndex(),q.getPageSize());
        }
        
        Page<Satisfaction> pages = null;
        pages = satisfactionDao.findAll(sp, pageRequest);
        return pages;
	}
	/**
	 * 后台查询，返回结果将所在部门和被测评人名称拼接
	 * @param q
	 * @return
	 */
	public Page<Satisfaction> searchResultDepartAppendEvaName (final SatisfactionQuery q) {
		Specification<Satisfaction> sp = buildSpecification(q);
        PageRequest pageRequest = null;
        if (q.getPageIndex() != null && q.getPageSize() != null) {
        	pageRequest = new PageRequest(q.getPageIndex(),q.getPageSize());
        }
        Page<Satisfaction> pages = null;
        pages = satisfactionDao.findAll(sp, pageRequest);
        return pages;
	}
	/**
	 * 根据被测评人id查询
	 * @param q
	 * @return
	 */
	private List<Satisfaction> buildPageRequestByBeEvaluatedInfo (final SatisfactionQuery q) {
		Specification<Satisfaction> sp = buildSpecification(q);
		List<Satisfaction> pages = null;
		Sort sort = new Sort(Direction.DESC,"evaluatedDepartmentId");
		pages = satisfactionDao.findAll(sp,sort);
		return pages;
	}
	
	/**
	 * 查询条件生成通用方法
	 * @param q
	 * @return
	 */
	private Specification<Satisfaction> buildSpecification (final SatisfactionQuery q) {
		Specification<Satisfaction> sp = new Specification<Satisfaction>() {
        	
			@Override
			public Predicate toPredicate(Root<Satisfaction> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> list = new ArrayList<>();
				if (q.getId() != null) {
                    list.add(cb.equal(root.get("id").as(Long.class), q.getId()));
                }
				if(StringUtils.isNotEmpty(q.getProjectName())) {
					list.add(cb.equal(root.get("projectName").as(String.class), q.getProjectName()));
				}
				if((q.getSearchTimeBegin() != null ) && (q.getSearchTimeEnd() != null)) {
					list.add(cb.between(root.get("evaluatedTime").as(Date.class), q.getSearchTimeBegin(), q.getSearchTimeEnd()));
				}
				if(StringUtils.isNotEmpty(q.getBeEvaluatedDepartmentName())) {
					list.add(cb.equal(root.get("beEvaluatedDepartmentName").as(String.class), q.getBeEvaluatedDepartmentName()));
				}
				if(StringUtils.isNotEmpty(q.getProjectName())) {
					list.add(cb.equal(root.get("projectName").as(String.class),q.getProjectName() ));
				}
				if(StringUtils.isNotEmpty(q.getBeEvaluatedName())) {
					list.add(cb.equal(root.get("beEvaluatedName"), q.getBeEvaluatedName()));
				}
				if(StringUtils.isNotEmpty(q.getEvaluatedName())) {
					list.add(cb.equal(root.get("evaluatedName"), q.getEvaluatedName()));
				}
				if(q.getScore() != null) {
					list.add(cb.equal(root.get("score"), q.getScore()));
				}
				if(q.getBeEvaluatedDepartmentId() != null) {
					list.add(cb.equal(root.get("beEvaluatedDepartmentId"), q.getBeEvaluatedDepartmentId()));
				}
				
				Predicate [] ps = new Predicate[list.size()];
				query.where(cb.and(list.toArray(ps)));
				return query.getGroupRestriction();
			}
        };
        return sp;
	}
	
}

