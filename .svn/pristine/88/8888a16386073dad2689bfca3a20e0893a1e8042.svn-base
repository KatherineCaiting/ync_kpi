package com.ync365.oa.service.satisfactionresult;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;

import com.ync365.commons.utils.StringUtils;
import com.ync365.oa.entity.SatisfactionResult;
import com.ync365.oa.query.SatisfactionResultQuery;
import com.ync365.oa.repository.SatisfactionResultDao;

@Component
@Transactional
public class SatisfactionResultService {
	
	private Logger log = LoggerFactory.getLogger(SatisfactionResultService.class);

	@Autowired
	private SatisfactionResultDao satifactionResultDao;
	
	
	/**
	 * 添加客户满意度结果记录
	 * @param satisfactionResult
	 * @return
	 */
	public SatisfactionResult add(SatisfactionResult satisfactionResult) {
		return satifactionResultDao.save(satisfactionResult);
	} 
	/**
	 * 根据id查询客户满度结果记录
	 * @param id
	 * @return
	 */
	public SatisfactionResult findOne(Long id ) {
		return satifactionResultDao.findOne(id);
	}
	/**
	 * 更新记录
	 * @param satisfactionResult
	 * @return
	 */
	public SatisfactionResult update (SatisfactionResult satisfactionResult) {
		return satifactionResultDao.save(satisfactionResult);
	}
	/**
	 * 客户满意度结果分页查询
	 * @param q
	 * @return
	 */
	public Page<SatisfactionResult> buildPageRequest (final SatisfactionResultQuery q) {
		 Specification<SatisfactionResult> sp = buildSpecification(q);
		 PageRequest pageRequest = null;
	        if (q.getPageIndex() != null && q.getPageSize() != null) {
	        	pageRequest = new PageRequest(q.getPageIndex(),q.getPageSize());
	        }
		 Page<SatisfactionResult> pages = null;
	        pages = satifactionResultDao.findAll(sp, pageRequest);
	        return pages;
	}
	
	/**
	 * 查询条件处理方法
	 * @param q
	 * @return
	 */
	private Specification<SatisfactionResult> buildSpecification (final SatisfactionResultQuery q) {
		Specification<SatisfactionResult> sp = new Specification<SatisfactionResult>() {

			@Override
			public Predicate toPredicate(Root<SatisfactionResult> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> list = new ArrayList<>();
				if (q.getId() != null) {
                    list.add(cb.equal(root.get("id").as(Long.class), q.getId()));
                }
				if(q.getCreateTime() != null) {
					SimpleDateFormat f = new SimpleDateFormat("yyyy-MM");
					list.add(cb.equal(cb.substring(root.get("createTime").as(String.class) ,1, 7),  f.format(q.getCreateTime())));
				}
				if(StringUtils.isNotEmpty(q.getBeEvaluatedDepartmentName())) {
					list.add(cb.equal(root.get("beEvaluatedDepartmentName").as(String.class), q.getBeEvaluatedDepartmentName()));
				}
				if(StringUtils.isNotEmpty(q.getBeEvaluatedName())) {
					list.add(cb.equal(root.get("beEvaluatedName"), q.getBeEvaluatedName()));
				}
				if(q.getScore() != null) {
					list.add(cb.equal(root.get("score"), q.getScore()));
				}
				if(q.getProjectNum() != null) {
					list.add(cb.equal(root.get("projectNum"), q.getProjectNum()));
				}
				if(q.getBeEvaluatedDepartmentId() != null) {
					list.add(cb.equal(root.get("beEvaluatedDepartmentId"), q.getBeEvaluatedDepartmentId()));
				}
				Predicate [] ps = new Predicate[list.size()];
				query.where(cb.and(list.toArray(ps)));
				return query.getGroupRestriction();
			}
		};
		return sp;
	}
}
