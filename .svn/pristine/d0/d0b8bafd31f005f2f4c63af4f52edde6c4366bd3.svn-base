package com.ync365.oa.service.specialty;


import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.ync365.oa.entity.Employe;
import com.ync365.oa.entity.Specialty;
import com.ync365.oa.entity.SpecialtyJX;
import com.ync365.oa.query.SpecialtyQuery;
import com.ync365.oa.repository.EmployeDao;
import com.ync365.oa.repository.SpecialtyDao;
import com.ync365.oa.repository.SpecialtyJXDao;


/**
 * 专业性管理的业务逻辑类
 * @author lyh
 *
 */
@Component
@Transactional
public class SpecialtyService {	
	@Autowired
	private SpecialtyDao specialtyDao;		
	@Autowired
	private SpecialtyJXDao specialtyJXDao;	
	@Autowired
	private EmployeDao employeDao;	
	
	/**
	 * 添加新的专业性
	 */
	public void addSpecialty(Specialty specialty){
		specialty.setCreateTime(new Date());
		specialtyDao.save(specialty);
	}
	
	/**
	 * 删除专业性
	 */
	public void deleteSpecialty(Long id){		
		specialtyDao.delete(id);			
	}
	
	/**
	 * 多条件组合查询专业性
	 * @return List<Specialty>
	 */
	public List<Specialty> getSpecialtyByMultiple(final SpecialtyQuery specialty){		
		Specification<Specialty> spec=new Specification<Specialty>() {			
			@Override
			public Predicate toPredicate(Root<Specialty> root, CriteriaQuery<?> query,
					CriteriaBuilder cb) {
				List<Predicate> predList = new ArrayList<Predicate>();
			
				if(StringUtils.isNotBlank(specialty.getName())){
					predList.add(cb.equal(root.get("name").as(String.class), specialty.getName()));
				}
				if(StringUtils.isNotBlank(specialty.getMt())){
					predList.add(cb.equal(root.get("mt").as(String.class), specialty.getMt()));
				}
				if(StringUtils.isNotBlank(specialty.getDepartmentName())){					
					predList.add(cb.equal(root.get("departmentName").as(String.class), specialty.getDepartmentName()));
				}				
				Predicate[] ps = new Predicate[predList.size()];
                query.where(cb.and(predList.toArray(ps)));                
                return query.getGroupRestriction();
			}
		};	
		return specialtyDao.findAll(spec);
	}
	
	/**
	 * 按月份获取某个部门的专业性
	 * @return List<Specialty>
	 */
	public List<Specialty> getAllSpecialtyByDepartmentId(final Long departmentId,final String createTime){
		Specification<Specialty> spec = new Specification<Specialty>() {
			@Override
			public Predicate toPredicate(Root<Specialty> root,CriteriaQuery<?> query, CriteriaBuilder cb) {
				List<Predicate> predList = new ArrayList<Predicate>();
				predList.add(cb.and(cb.equal(root.get("departmentId"), departmentId)));
				
				if (createTime != null) {
                    SimpleDateFormat f = new SimpleDateFormat("yyyy-MM");
                    predList.add(cb.equal(cb.substring(root.get("createTime").as(String.class), 1, 7),
                            f.format(createTime)));
	             }		
				Predicate[] ps = new Predicate[predList.size()];
                query.where(cb.and(predList.toArray(ps)));                
                return query.getGroupRestriction();
			}			
		};		
		return (List<Specialty>)specialtyDao.findAll(spec);
	}
	
	/**
	 * 获取所有的专业性
	 * @return List<Specialty>
	 */
	public List<Specialty> getAllSpecialty(){
		return (List<Specialty>)specialtyDao.findAll();
	}	
	
}
