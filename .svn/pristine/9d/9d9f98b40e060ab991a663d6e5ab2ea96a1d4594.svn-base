package com.ync365.oa.service.efficiencyResult;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import javax.transaction.Transactional;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Component;

import com.ync365.oa.entity.Efficiency;
import com.ync365.oa.entity.EfficiencyResult;
import com.ync365.oa.query.EfficiencyQuery;
import com.ync365.oa.query.EfficiencyResultQuery;
import com.ync365.oa.repository.EfficiencyDao;
import com.ync365.oa.repository.EfficiencyResultDao;
import com.ync365.oa.service.efficiency.EfficiencyService;

@Component
@Transactional
public class EfficiencyResultService {
	
	private Logger log= LoggerFactory.getLogger(EfficiencyResult.class);

	@Autowired
	private EfficiencyResultDao  efficiencyResultDao;
	
	@Autowired
	private EfficiencyDao efficiencyDao;
	
	
	/**
	 * 查询单个
	 * */
	public EfficiencyResult findOne(Long id){
		return efficiencyResultDao.findOne(id);
	}
	
	/***
	 *  查询月度绩效
	 * @return
	 */
	public Page<EfficiencyResult> find(final EfficiencyResultQuery erq){
		Specification<EfficiencyResult> sp=new Specification<EfficiencyResult>() {

			@Override
			public Predicate toPredicate(Root<EfficiencyResult> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				// TODO Auto-generated method stub
				List<Predicate> list=new ArrayList<>();
				
				if(StringUtils.isNotEmpty(erq.getEmployeName())){
					list.add(cb.equal(root.get("employeName").as(String.class),erq.getEmployeName()));
				}
				if(StringUtils.isNotEmpty(erq.getEmployeCode())){
					list.add(cb.equal(root.get("employeCode").as(String.class), erq.getEmployeCode()));
				}
				if(erq.getProjectCount()!=null){
					list.add(cb.equal(root.get("projectCount").as(Integer.class), erq.getProjectCount()));
				}
				if(StringUtils.isNotEmpty(erq.getDepartmentName())){
					list.add(cb.equal(root.get("departmentName").as(String.class), erq.getDepartmentName()));
				}
				if(erq.getActualHours()!=null){
					list.add(cb.equal(root.get("actualHours").as(Integer.class), erq.getActualHours()));
				}
			  if (erq.getCreateTime() != null) {
                    SimpleDateFormat f = new SimpleDateFormat("yyyy-MM");
                    list.add(cb.equal(cb.substring(root.get("createTime").as(String.class), 1, 7),
                            f.format(erq.getCreateTime())));
                }
				Predicate[] ps=new Predicate[list.size()];
				query.where(cb.and(list.toArray(ps)));
				if (StringUtils.isNotEmpty(erq.getSort())) {
                    query.orderBy(cb.desc(root.get(erq.getSort())));
                }
				return query.getGroupRestriction();
			}
		};
		PageRequest pageRequest =null;
		if (erq.getPageIndex() != null && erq.getPageSize() != null) {
            pageRequest = new PageRequest(erq.getPageIndex(),erq.getPageSize());
        }
		Page<EfficiencyResult> pages=null;
		pages=efficiencyResultDao.findAll(sp,pageRequest);
		return pages;
	}
	
	/***
	 * 查询某个月该名员工的效能
	 */
	
	public List<Efficiency> findEmployeEfficiency(final EfficiencyQuery eq){
		Specification<Efficiency> sp=new Specification<Efficiency>() {

			@Override
			public Predicate toPredicate(Root<Efficiency> root,
					CriteriaQuery<?> query, CriteriaBuilder cb) {
				// TODO Auto-generated method stub
				List<Predicate> list=new ArrayList<>();
				if(StringUtils.isNotEmpty(eq.getEmployeCode())){
					list.add(cb.equal(root.get("employeCode").as(String.class), eq.getEmployeCode()));
				}
				if(eq.getCreateTime()!=null){
					SimpleDateFormat f=new SimpleDateFormat("yyyy-MM");
					list.add(cb.equal(cb.substring(root.get("createTime").as(String.class),1,7), f.format(eq.getCreateTime())));
				}
				Predicate[] ps=new Predicate[list.size()];
				query.where(cb.and(list.toArray(ps)));
				return query.getGroupRestriction();
			}
		};
		return efficiencyDao.findAll(sp);
	}
}
